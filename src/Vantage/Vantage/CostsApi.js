/*
 * Vantage
 * Vantage API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@vantage.sh
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.21
 *
 * Do not edit the class manually.
 *
 */

import {ApiClient} from "../ApiClient";
import {Costs} from '../model/Costs';
import {Report} from '../model/Report';
import {Reports} from '../model/Reports';

/**
* Costs service.
* @module Vantage/Vantage/CostsApi
* @version 1.0.0
*/
export class CostsApi {

    /**
    * Constructs a new CostsApi. 
    * @alias module:Vantage/Vantage/CostsApi
    * @class
    * @param {module:Vantage/ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:Vantage/ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Return available Costs for the specified Cost Report and optional time period. If no time period is specified it will return all available costs for the report.
     * @param {String} reportId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.startDate Query costs by the first date you would like to filter from. ISO 8601 Formatted - 2021-07-15 or 2021-07-15T19:20:48+00:00.
     * @param {String} opts.endDate Query costs by the last date you would like to filter to. ISO 8601 Formatted - 2021-07-15 or 2021-07-15T19:20:48+00:00.
     * @param {Number} opts.page The page of results to return.
     * @param {Number} opts.limit The amount of results to return. The maximum is 1000
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:Vantage/model/Costs} and HTTP response
     */
    getCostsWithHttpInfo(reportId, opts) {
      opts = opts || {};
      let postBody = null;

      // verify the required parameter 'reportId' is set
      if (reportId === undefined || reportId === null) {
        throw new Error("Missing the required parameter 'reportId' when calling getCosts");
      }


      let pathParams = {
        'report_id': reportId
      };
      let queryParams = {
        'start_date': opts['startDate'],
        'end_date': opts['endDate'],
        'page': opts['page'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Costs;

      return this.apiClient.callApi(
        '/v1/reports/{report_id}/costs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Return available Costs for the specified Cost Report and optional time period. If no time period is specified it will return all available costs for the report.
     * @param {String} reportId 
     * @param {Object} opts Optional parameters
     * @param {String} opts.startDate Query costs by the first date you would like to filter from. ISO 8601 Formatted - 2021-07-15 or 2021-07-15T19:20:48+00:00.
     * @param {String} opts.endDate Query costs by the last date you would like to filter to. ISO 8601 Formatted - 2021-07-15 or 2021-07-15T19:20:48+00:00.
     * @param {Number} opts.page The page of results to return.
     * @param {Number} opts.limit The amount of results to return. The maximum is 1000
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Vantage/model/Costs}
     */
    getCosts(reportId, opts) {
      return this.getCostsWithHttpInfo(reportId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Return a Cost Report.
     * @param {String} reportId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:Vantage/model/Report} and HTTP response
     */
    getReportWithHttpInfo(reportId) {
      let postBody = null;

      // verify the required parameter 'reportId' is set
      if (reportId === undefined || reportId === null) {
        throw new Error("Missing the required parameter 'reportId' when calling getReport");
      }


      let pathParams = {
        'report_id': reportId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Report;

      return this.apiClient.callApi(
        '/v1/reports/{report_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Return a Cost Report.
     * @param {String} reportId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Vantage/model/Report}
     */
    getReport(reportId) {
      return this.getReportWithHttpInfo(reportId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Return all Cost Reports.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page The page of results to return.
     * @param {Number} opts.limit The amount of results to return. The maximum is 1000
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:Vantage/model/Reports} and HTTP response
     */
    getReportsWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth2'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Reports;

      return this.apiClient.callApi(
        '/v1/reports', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Return all Cost Reports.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page The page of results to return.
     * @param {Number} opts.limit The amount of results to return. The maximum is 1000
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:Vantage/model/Reports}
     */
    getReports(opts) {
      return this.getReportsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
